<?php

/**
 * Created by PhpStorm.
 * User: Gowtham
 * Date: 12/8/2015
 * Time: 4:13 PM
 */
class Property extends CI_Controller
{

    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
        $this->load->model('property_model','pro');
        $this->load->model('Property_type_model','feature');
        $this->load->helper('string');
    }

    function index(){

        if($this->input->get('check_in') && $this->input->get('check_out') ){

            $this->session->set_userdata("check_date",
                array( 'check_in' => $this->input->get('check_in') ,
                'check_out' => $this->input->get('check_out') ) ) ;

            $res = $this->db->from("rooms")
                ->select("p_id")
                ->where("(no_of_room - booked_room) < ", $this->input->get('no_of_room') , false )
                ->where("( start_date >= DATE_FORMAT('". $this->input->get('check_in') ."' , '%Y-%m-%d') AND start_date IS NOT NULL )",null,false)
                ->where("(end_date <= DATE_FORMAT('".$this->input->get('check_out')."' , '%Y-%m-%d' ) AND end_date  IS NOT NULL  )",null,false)->get()->result();

//            echo $this->db->last_query();
            foreach($res as $p )
                $p_id[] = $p->p_id ;
        }

        $this->db->start_cache();

        $this->db->from("property")->where("status " , 1 )
            ->join("rooms", "rooms.p_id = property.id "  )
            ->select("property.*, rooms.price ");

        if(isset($p_id) && !empty($p_id) ){
            $this->db->where_not_in("property.id",$p_id);
        }

        if($this->input->get('price')){
            $this->db->where($this->input->get('price') ,  null ) ;
        }

        if($this->input->get('star') != 0   ){
            $this->db->where_in("star" ,  $this->input->get('star') ) ;
        }

        if($this->input->get('city') ){
            if(is_array($this->input->get('city'))){
                $this->db->group_start();
                foreach($this->input->get('city') as $k => $c ){
                    $k == 0 ? $this->db->like('city', $c ) : $this->db->or_like('city', $c )  ;
                }
                $this->db->group_end();
            }else {
                $this->db->like('city', $this->input->get('city') );
            }
        }

        if($this->input->get('facilities') ){
            $this->db->group_start();
            foreach($this->input->get('facilities') as $k => $c ){
                $k == 0 ? $this->db->like('feature', $c ) : $this->db->or_like('feature', $c )  ;
            }
            $this->db->group_end();
        }


        foreach($this->input->get('order') as $k => $v ){
            if( !empty($v) ){
                $this->db->order_by($k , $v);
            }
        }

        $this->db->stop_cache();
        $d['count'] = $this->db->count_all_results();


        $this->db->limit(LIMIT ,  LIMIT * ( ($this->input->get('page_id')? $this->input->get('page_id') : 1)  - 1 )) ;

        $d['product'] = $this->db->get()->result();

        $this->db->flush_cache();

//        echo $this->db->last_query();

        $d['feature'] =  $this->feature->getBy(array('status'=>1 ) , false ,  'id,title,image'   );

        $d['city']  = $this->pro->getBy(array('status'=>1 , "city !=" => "" ) , false , 'city' ,array('group_by'=>'city') );



        $this->load->view('property-list',$d);
    }

    function property_type($id){
        $d['pro_type'] = $this->type->getBy(array('id'=>$id ) ,1  );
        if(is_object($d['pro_type'])) {
            $d['type'] = $this->type->getRecords();
            $d['product'] = $this->pro->getBy(array('status'=>1 , 'property_type' => $id  ) ,  array( LIMIT ,  LIMIT * ( ($this->input->get('page_id')? $this->input->get('page_id') : 1)  - 1 ) )   ) ;
            $d['count'] = $this->pro->getBy(array('status'=>1 , 'property_type' => $id  ) ,  'count'  ) ;

            $location = $this->pro->getBy(array('status'=>1 ) , false , 'key' ,array('group_by'=>'key') );

            foreach($location as $l ){
                $s = explode(',',$l->key);
               if(count($s) == 1 )
                   $k[] = trim($s[0]) ;
                else {
                    foreach($s  as $v ){
                        $k[] = trim($v)  ;
                    }
                }
            }
            $k =  array_unique($k);
            sort($k);
            $d['key'] = $k ;
            unset($k);
            unset($location);
            $this->load->view('property_type',$d);
        }else{
            show_404();
        }
    }

    function property_detail($id){
        $d['property'] = $this->pro->getBy(array('id'=>$id ) ,1  );
        if(is_object($d['property'])) {

            $d['images'] = $this->pro->getMoreImageById($id  );


            $d['type'] = $this->type->getRecords();
            $location = $this->pro->getBy(array('status'=>1 ) , false , 'key' ,array('group_by'=>'key') );
            foreach($location as $l ){
                $s = explode(',',$l->key);
                if(count($s) == 1 )
                    $k[] = trim($s[0]) ;
                else {
                    foreach($s  as $v ){
                        $k[] = trim($v)  ;
                    }
                }
            }
            $k =  array_unique($k);
            sort($k);
            $d['key'] = $k ;
            unset($k);
            unset($location);
            $this->load->view('property_detail',$d);
        }else{
            show_404();
        }
    }

    function detail($title,$id){

        $this->form_validation->set_rules('room[]', 'Room', 'required');
        if ($this->form_validation->run() == TRUE){
            $this->load->library('cart');
            $this->cart->insert($this->input->post("room"));
            redirect( base_url()."cart" ) ;
        }

        $id = $this->encrypt->myDecode( $id );
        $d['property'] = $this->pro->getBy(array('id'=>$id ) ,1  );
        $loc = explode(',', $d['property']->location );
        $d['related'] = $this->pro->getBy(array('status'=>1 , 'id !='=> $id , 'property_type' => $d['property']->property_type ) , 4 , 'id , title , image , location , star ' ,  array('like' => array('location'=>end($loc))  )  );

        if(! is_object($d['property']))  show_404();
        $d['images'] = $this->pro->getMoreImageById($id);
        $rooms = $this->pro->getRoomsById($id);
        foreach($rooms as &$room){
            $f = explode(',',$room->feature);
            $room->feature = $this->db->from("property_type")->select("title,image")->where_in("id",$f)->get()->result();
        }

        $d['rooms'] = $rooms ;

       // p($d['related']);

        $this->load->view('property-detailed',$d);

    }

    function sent_mail(){

        if(isset($_POST['email'])):

            $name = $_POST['name'];
            $email = $_POST['email'];
            $tel = $_POST['tel'];
            $code = $_POST['code'];
            $subject = $_POST['property_title']." - ".$code;
            $property_permalink = $_POST['property_permalink'];
            $message = $_POST['message'];
            $address = 'gowtham@itmartx.com';

            if(get_magic_quotes_gpc()) {
                $message = stripslashes($message);
            }

            $e_subject = 'You Have Received a Message From ' . $name . '.';

            if(!empty($subject))
            {
                $e_subject = $subject . '.';
            }

            $e_body = 	"You have Received a message from: "
                .$name
                . "\n"
                ."Their additional message is as follows."
                ."\r\n\n";

            $property_permalink = "\" $property_permalink \"\r\n\n";

            $e_content = "\" $message \"\r\n\n property code - $code \n\n ";

            $e_reply = 	"You can contact "
                .$name
                . " via email, "
                .$email. " \n via phone no, "
                .$tel;

            $msg = $e_body . $property_permalink .$e_content . $e_reply;

            if(mail($address, $e_subject, $msg, "From: $email\r\nReply-To: $email\r\nReturn-Path: $email\r\n","-f $address"))
            {
                echo "Message Sent Successfully!";
            }
            else
            {
                echo "Server Error: mail method failed!";
            }
        else:
            echo "Invalid Request !";
        endif;

    }

    function search(){
        $this->db->start_cache();

        $this->db->from("property")->where("status " , 1 )
            ->join("rooms", "rooms.p_id = property.id " )
            ->select("property.*, rooms.price ");

        if($this->input->get('price')){
            $this->db->where($this->input->get('price') ,  null ) ;
        }

        if($this->input->get('star') != 0   ){
            $this->db->where_in("star" ,  $this->input->get('star') ) ;
        }

        if($this->input->get('city') ){
            $this->db->group_start();
            foreach($this->input->get('city') as $k => $c ){
                $k == 0 ? $this->db->like('city', $c ) : $this->db->or_like('city', $c )  ;
            }
            $this->db->group_end();
        }

        if($this->input->get('facilities') ){
            $this->db->group_start();
            foreach($this->input->get('facilities') as $k => $c ){
                $k == 0 ? $this->db->like('feature', $c ) : $this->db->or_like('feature', $c )  ;
            }
            $this->db->group_end();
        }


        foreach($this->input->get('order') as $k => $v ){
            if( !empty($v) ){
                $this->db->order_by($k , $v);
            }
        }

        $this->db->stop_cache();
        $d['count'] = $this->db->count_all_results();

        $this->db->limit(LIMIT);
        $d['product'] = $this->db->get()->result();

        $this->load->view('_ajax_product-list',$d);


    }

}